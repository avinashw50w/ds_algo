Design patterns are reusable solutions to common problems that occur in software design. They provide guidelines and best practices for designing software systems that are modular, flexible, and maintainable. Here are some commonly recognized design patterns:

1. Creational Patterns:
   - Singleton: Ensures only one instance of a class is created.
   - Factory Method: Creates objects without specifying the exact class.
   - Abstract Factory: Provides an interface for creating related objects without specifying their concrete classes.
   - Builder: Separates the construction of complex objects from their representation.
   - Prototype: Creates new objects by cloning existing ones.

2. Structural Patterns:
   - Adapter: Converts the interface of a class into another interface the client expects.
   - Decorator: Dynamically adds responsibilities to objects.
   - Composite: Represents a group of objects as a single object.
   - Proxy: Provides a surrogate or placeholder for another object to control access to it.
   - Facade: Provides a simplified interface to a complex subsystem of classes.

3. Behavioral Patterns:
   - Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
   - Strategy: Defines a family of interchangeable algorithms and encapsulates them within objects, allowing them to be used interchangeably.
   - Iterator: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
   - Command: Encapsulates a request as an object, thereby letting you parameterize clients with queues, requests, and operations.
   - Template Method: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.

4. Architectural Patterns:
   - Model-View-Controller (MVC): Separates the representation of data (model), user interface (view), and application logic (controller).
   - Model-View-ViewModel (MVVM): Separates the user interface from the underlying business logic, with a focus on data bindings.
   - Layered Architecture: Separates an application into distinct layers, such as presentation, business, and data layers.
   - Dependency Injection: Allows objects to define their dependencies without constructing them directly, enabling loose coupling.
   - Microservices: Decomposes an application into smaller, independently deployable services that communicate over a network.

These are just a few examples of design patterns. There are many more patterns, each addressing specific design challenges. It's important to select the appropriate pattern(s) based on the problem at hand and the desired software architecture.



------------------------------------

# difference between factory and strategy design pattern

 - A factory pattern is a creational pattern. A strategy pattern is an operational pattern. Put another way, a factory pattern is used to create objects of a specific type. A strategy pattern is use to perform an operation (or set of operations) in a particular manner. In the classic example, a factory might create different types of Animals: Dog, Cat, Tiger, while a strategy pattern would perform particular actions, for example, Move; using Run, Walk, or Lope strategies.

In fact the two can be used together. For example, you may have a factory that creates your business objects. It may use different strategies based on the persistence medium. If your data is stored locally in XML it would use one strategy. If the data were remote in a different database, it would use another.